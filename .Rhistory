# remove unique_id column
fcst <- fcst |>
dplyr::select(-unique_id)
}
add_history
# Generate fitted values ----
if(add_history){
fitted <- timegpt_historic(df, freq=freq, id_col=id_col, time_col=time_col, target_col=target_col, level=level, finetune_steps=finetune_steps, clean_ex_first=clean_ex_first)
if(tsibble::is_tsibble(df)){
fcst <- dplyr::bind_rows(fitted, fcst)
}else{
fcst <- rbind(fitted, fcst)
}
}
load_all()
document()
df <- read.csv('https://raw.githubusercontent.com/Nixtla/transfer-learning-time-series/main/datasets/electricity-short-with-ex-vars.csv')
head(df)
X_df <- read.csv('https://raw.githubusercontent.com/Nixtla/transfer-learning-time-series/main/datasets/electricity-short-future-ex-vars.csv')
head(X_df)
# Prepare data ----
url <- "https://dashboard.nixtla.io/api/timegpt_multi_series"
if(is.null(id_col)){
# create unique_id for single series
df <- df |>
dplyr::mutate(unique_id = "ts_0") |>
dplyr::select(c("unique_id", tidyselect::everything()))
}
data <- .timegpt_data_prep(df, freq, id_col, time_col, target_col, X_df)
data <- .timegpt_data_prep(df, freq, id_col, time_col, target_col)
freq <- data$freq
y <- data$y
timegpt_data <- list(
model = model,
fh = h,
y = y,
freq = freq,
finetune_steps = finetune_steps,
clean_ex_first = clean_ex_first
)
names(df)
# Validation checks for exogenous variables
vars_df <- setdiff(names(df), c("unique_id", "ds", "y"))
vars_df
vars_X_df <- setdfif(names(X_df), c("unique_id", "ds"))
vars_X_df <- setdiff(names(X_df), c("unique_id", "ds"))
?setequal
setequal(vars_df, vars_X_df)
# Validation checks for exogenous variables
vars_df <- setdiff(names(df), c("unique_id", "ds", "y"))
vars_X_df <- setdiff(names(X_df), c("unique_id", "ds"))
if(!setequal(vars_df, vars_X_df)){
stop("You have to include the same exogenous variables in df and X_df")
}
num_ids <- unique(df$unique_id)
nrow(X_df)
num_ids <- unique(df$unique_id)
num_ids*h
num_ids <- length(unique(df$unique_id))
num_ids*h
usethis::use_r("validation_exogenous")
usethis::use_r("validate_exogenous")
# Check if df and X_df contain the same variables
vals_df <- setdiff(names(df), c("unique_id", "ds", "y"))
vals_df
res <- list(validation = TRUE,
message = NULL
)
# Check if the future values of the exogenous variables cover the forecast horizon
future_vals <- X_df |>
dplyr::group_by("unique_id") |>
dplyr::filter(dplyr::n() == h)
future_vals
head(X_df)
h
# Check if the future values of the exogenous variables cover the forecast horizon
future_vals <- X_df |>
dplyr::group_by("unique_id") |>
dplyr::filter(dplyr::n() == h)
# Check if the future values of the exogenous variables cover the forecast horizon
future_vals <- X_df |>
dplyr::group_by("unique_id")
future_vals
?dplyr::n()
dplyr::n(future_vals)
# Check if the future values of the exogenous variables cover the forecast horizon
future_vals <- X_df |>
dplyr::group_by("unique_id") |>
dplyr::filter(dplyr::n() == h))
# Check if the future values of the exogenous variables cover the forecast horizon
future_vals <- X_df |>
dplyr::group_by("unique_id") |>
dplyr::filter(dplyr::n() == h)
# Check if the future values of the exogenous variables cover the forecast horizon
future_vals <- X_df |>
dplyr::group_by("unique_id") |>
dplyr::filter(dplyr::n() == h) |>
dplyr::ungroup()
# Check if the future values of the exogenous variables cover the forecast horizon
future_vals <- X_df |>
dplyr::group_by(unique_id) |>
dplyr::filter(dplyr::n() == h)
# Check if the future values of the exogenous variables cover the forecast horizon
future_vals <- X_df |>
dplyr::group_by(unique_id) |>
dplyr::filter(dplyr::n() == h)
length(unique(future_vals))
length(vals_X_df)
# Check if df and X_df contain the exogenous variables
vals_df <- setdiff(names(df), c("unique_id", "ds", "y"))
vals_X_df <- setdiff(names(X_df), c("unique", "ds"))
vals_X_df
vals_X_df <- setdiff(names(X_df), c("unique_id", "ds"))
vals_X_df
# Check if df and X_df contain the exogenous variables
vals_df <- setdiff(names(df), c("unique_id", "ds", "y"))
vals_X_df <- setdiff(names(X_df), c("unique_id", "ds"))
vals_X_df
length(unique(future_vals$unique_id))
h
length(unique(future_vals$unique_id))
length(unique(X_df$unique_id))
# Validation checks for exogenous variables
res_validation <- .validate_exogenous(df, h, X_df)
load_all()
document()
# Validation checks for exogenous variables
res_validation <- .validate_exogenous(df, h, X_df)
res$validation
res$message
if(!res_validation){
print("salam")
}
# Validation checks for exogenous variables
res_validation <- .validate_exogenous(df, h, X_df)
# Validation checks for exogenous variables
res_exogenous <- .validate_exogenous(df, h, X_df)
res_exogenous
# Validation checks for exogenous variables
val_exogenous <- .validate_exogenous(df, h, X_df)
if(!val_exogenous$validation){
print("salam")
}
val_exogenous$validation <- FALSE
# Validation checks for exogenous variables
val_exogenous <- .validate_exogenous(df, h, X_df)
if(!val_exogenous$validation){
print("salam")
}
val_exogenous
val_exogenous$validation <- FALSE
if(!val_exogenous$validation){
print("salam")
}
val_exogenous
val_exogenous$message <- "salam"
# Validation checks for exogenous variables
val_exogenous <- .validate_exogenous(df, h, X_df)
if(!val_exogenous$validation){
stop(print(val_exogenous$message))
}
val_exogenous <- FALSE
# Validation checks for exogenous variables
val_exogenous <- .validate_exogenous(df, h, X_df)
val_exogenous$validation
val_exogenous$validation <- FALSE
val_exogenous$message
val_exogenous$message <- "salam"
if(!val_exogenous$validation){
stop(print(val_exogenous$message))
}
load_all()
document()
load_all()
# Validation checks for exogenous variables
status <- .validate_exogenous(df, h, X_df)
status
check()
load_all()
load_all()
document()
check()
load_all()
document()
check()
head(df)
print("salam")
names(df)
load_all()
load_all()
document()
check()
# Multi-series ----
df <- read.csv('https://raw.githubusercontent.com/Nixtla/transfer-learning-time-series/main/datasets/electricity-short.csv')
head(df)
nixtlar::timegpt_plot(df, id_col = "unique_id")
## Forecast ----
fcst <- nixtlar::timegpt_forecast(df, h = 8, id_col = "unique_id", level = c(80,90))
head(fcst)
nixtlar::timegpt_plot(df, fcst, h = 8, id_col = "unique_id")
nixtlar::timegpt_plot(df, fcst, h = 8, id_col = "unique_id", max_insample_length = 120)
## Fitted values ----
fcst <- nixtlar::timegpt_historic(df, id_col = "unique_id", level = c(80,90))
head(fcst)
nixtlar::timegpt_plot(df, fcst, id_col = "unique_id")
## Forecast and fitted values ----
fcst <- nixtlar::timegpt_forecast(df, h = 8, id_col = "unique_id", level = c(80,90), add_history = TRUE)
head(fcst)
nixtlar::timegpt_plot(df, fcst, h = 8, id_col = "unique_id")
nixtlar::timegpt_plot(df, fcst, h = 8, id_col = "unique_id", max_insample_length = 120)
## Anomaly detection ----
fcst <- nixtlar::timegpt_anomaly_detection(df, id_col = "unique_id", level = c(90))
head(fcst)
nixtlar::timegpt_plot(df, fcst, id_col = "unique_id", plot_anomalies = TRUE)
## Cross validation ----
fcst <- nixtlar::timegpt_cross_validation(df, h = 8, id_col = "unique_id", n_windows = 4, step_size = 2, level = c(80,95))
head(fcst)
nixtlar::timegpt_plot(df, fcst, id_col = "unique_id", max_insample_length = 120)
# Single series ----
df <- read.csv('https://raw.githubusercontent.com/Nixtla/transfer-learning-time-series/main/datasets/air_passengers.csv')
head(df)
nixtlar::timegpt_plot(df, time_col = "timestamp", target_col = "value")
## Forecast ----
fcst <- nixtlar::timegpt_forecast(df, h = 12, time_col = "timestamp", target_col = "value", level = c(80,95))
head(fcst)
nixtlar::timegpt_plot(df, fcst, h = 12, time_col = "timestamp", target_col = "value")
## Works with tsibbles too
tsbl <- tsibble::as_tsibble(AirPassengers)
head(tsbl)
fcst <- nixtlar::timegpt_forecast(tsbl, h = 12, time_col = "index", target_col = "value", level = c(80,90))
head(fcst)
nixtlar::timegpt_plot(tsbl, fcst, h = 12, time_col = "index", target_col = "value")
## Fitted values ----
fcst <- nixtlar::timegpt_historic(df, time_col = "timestamp", target_col = "value", level = c(80,95))
head(fcst)
nixtlar::timegpt_plot(df, fcst, time_col = "timestamp", target_col = "value")
## Forecast and fitted values ----
fcst <- nixtlar::timegpt_forecast(df, h = 12, time_col = "timestamp", target_col = "value", level = c(80,95), add_history = TRUE)
head(fcst)
nixtlar::timegpt_plot(df, fcst, h = 12, time_col = "timestamp", target_col = "value")
## Anomaly detection ----
fcst <- nixtlar::timegpt_anomaly_detection(df, time_col = "timestamp", target_col = "value", level = c(95))
head(fcst)
nixtlar::timegpt_plot(df, fcst, time_col = "timestamp", target_col = "value", plot_anomalies = TRUE)
## Cross validation ----
fcst <- nixtlar::timegpt_cross_validation(df, h = 12, time_col = "timestamp", target_col = "value", n_windows = 4, step_size = 2, level = c(80,95))
head(fcst)
nixtlar::timegpt_plot(df, fcst, time_col = "timestamp", target_col = "value", max_insample_length = 120)
nixtlar::timegpt_plot(df, fcst, time_col = "timestamp", target_col = "value", max_insample_length = 24)
nixtlar::timegpt_plot(df, fcst, time_col = "timestamp", target_col = "value")
nixtlar::timegpt_plot(df, fcst, time_col = "timestamp", target_col = "value", max_insample_length = 24)
head(df)
# Exogenous variables ----
df <- read.csv('https://raw.githubusercontent.com/Nixtla/transfer-learning-time-series/main/datasets/electricity-short-with-ex-vars.csv')
head(df)
future_ex_vars_df <- read.csv('https://raw.githubusercontent.com/Nixtla/transfer-learning-time-series/main/datasets/electricity-short-future-ex-vars.csv')
# Exogenous variables ----
df <- read.csv('https://raw.githubusercontent.com/Nixtla/transfer-learning-time-series/main/datasets/electricity-short-with-ex-vars.csv')
head(df)
future_ex_vars_df <- read.csv('https://raw.githubusercontent.com/Nixtla/transfer-learning-time-series/main/datasets/electricity-short-future-ex-vars.csv')
head(future_ex_vars_df)
# Exogenous variables ----
df <- read.csv('https://raw.githubusercontent.com/Nixtla/transfer-learning-time-series/main/datasets/electricity-short-with-ex-vars.csv')
head(df)
future_ex_vars_df <- read.csv('https://raw.githubusercontent.com/Nixtla/transfer-learning-time-series/main/datasets/electricity-short-future-ex-vars.csv')
head(future_ex_vars_df)
# Here the forecast horizon needs to be 24
fcst <- timegpt_forecast(df, h = 24, id_col = "unique_id", X_df = future_ex_vars_df, level = c(80,90))
head(fcst)
fcst <- timegpt_historic(df, h = 24, id_col = "unique_id", level = c(80,90))
fcst <- timegpt_historic(df, id_col = "unique_id", level = c(80,90))
head(fcst)
fcst <- timegpt_forecast(df, h = 24, id_col = "unique_id", X_df = future_ex_vars_df, level = c(80,90), add_history = TRUE)
head(fcst)
fcst <- timegpt_anomaly_detection(df, id_col = "unique_id", level = c(95))
head(fcst)
fcst <- timegpt_cross_validation(df, h = 24, id_col = "unique_id", X_df = future_ex_vars_df, level = c(80,90), n_windows = 4, step_size = 2)
head(fcst)
usethis::use_vignette("anomaly-detection")
pkgdown::build_site()
pkgdown::build_site()
load_all()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
load_all()
# Multi-series ----
df <- read.csv('https://raw.githubusercontent.com/Nixtla/transfer-learning-time-series/main/datasets/electricity-short.csv')
head(df)
nixtlar::timegpt_plot(df, id_col = "unique_id")
## Forecast ----
fcst <- nixtlar::timegpt_forecast(df, h = 8, id_col = "unique_id", level = c(80,90))
head(fcst)
nixtlar::timegpt_plot(df, fcst, h = 8, id_col = "unique_id")
nixtlar::timegpt_plot(df, fcst, h = 8, id_col = "unique_id", max_insample_length = 120)
document()
pkgdown::build_site()
document()
load_all()
load_all()
document()
pkgdown::build_site()
load_all()
document()
pkgdown::build_site()
document()
load_all()
pkgdown::build_site()
pkgdown::build_site()
library(devtools)
load_all()
pkgdown::build_site()
library(devtools)
load_all()
document()
check()
pkgdown::build_site()
nixtlar::electricity
head(nixtlar::electricity)
str(nixtlar::electricity)
load_all()
document()
devtools::test()
devtools::check()
getwd()
devtools::check()
load_all()
document()
check()
usethis::use_test("timegpt_historic")
test_data <- nixtlar::electricity
timegpt_historic(test_data, freq = "H", id_col = "unique_id", level = c(80,95)) -> response
head(response)
load_all()
document()
check()
check()
load_all()
document()
check()
load_all()
check()
load_all()
check()
timegpt_anomalies_df <- timegpt_anomaly_detection(df, id_col = "unique_id", level = c(95))
df <- nixtlar::electricity
timegpt_anomalies_df <- timegpt_anomaly_detection(df, id_col = "unique_id", level = c(95))
timegpt_anomalies_df
head(df)
httptest2::start_capturing()
fcst <- timegpt_anomaly_detection(df, id_col = "unique_id", level = c(95))
httptest2::stop_capturing()
getwd()
pkgdown::build_site()
load_all()
pkgdown::build_site()
load_all()
pkgdown::build_site()
pkgdown::build_site()
load_all()
pkgdown::build_site()
document()
load_all()
document()
pkgdown::build_site()
pkgdown::build_site()
devtools::install()
vignette("anomaly-detection")
vignette("get-started")
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
load_all()
document()
pkgdown::build_site()
usethis::use_vignette("historical_forecast")
load_all()
document()
usethis::use_vignette("historical-forecast")
load_all()
document()
pkgdown::build_site()
httptest2::start_capturing()
head(df)
df <- nixtlar::timegpt_forecast()
df <- nixtlar::electricity
httptest2::start_capturing()
fcst <- timegpt_forecast(df, h=8, id_col="unique_id", level = c(80,95))
httptest2::stop_capturing()
head(fcst)
head(fcst)
httptest2::start_capturing()
fcst <- timegpt_historic(df, id_col = "unique_id", level = c(80,95))
httptest2::stop_capturing()
head(fcst)
httptest2::start_capturing()
fcst <- timegpt_anomaly_detection(df, id_col = "unique_id")
httptest2::stop_capturing()
httptest2::start_capturing()
timegpt_cv_df <- timegpt_cross_validation(df, h = 8, id_col = "unique_id", n_windows = 5, step_size = 1)
httptest2::stop_capturing()
httptest2::start_capturing()
fcst <- timegpt_anomaly_detection(df, id_col = "unique_id", level = c(95))
httptest2::stop_capturing()
usethis::use_vignette("cross-validation")
httptest2::start_capturing()
nixtlar::timegpt_cross_validation()
httptest2::start_capturing()
timegpt_cv_df <- timegpt_cross_validation(df, h = 8, id_col = "unique_id", n_windows = 3, step_size = 24)
httptest2::stop_capturing()
httptest2::start_capturing()
timegpt_cv_df <- timegpt_cv <- timegpt_cross_validation(df, h = 8, id_col = "unique_id", n_windows = 5)
httptest2::stop_capturing()
timegpt_plot(df, fcst, id_col = "unique_id", max_insample_length = 150)
timegpt_plot(df, timegpt_cv_df, id_col = "unique_id", max_insample_length = 150)
timegpt_cv_df <- timegpt_cv <- timegpt_cross_validation(df, h = 8, id_col = "unique_id", n_windows = 3)
timegpt_plot(df, timegpt_cv_df, id_col = "unique_id", max_insample_length = 150)
timegpt_plot(df, timegpt_cv_df, id_col = "unique_id", max_insample_length = 100)
timegpt_plot(df, timegpt_cv_df, id_col = "unique_id", max_insample_length = 96)
timegpt_cv_df <- timegpt_cv <- timegpt_cross_validation(df, h = 8, id_col = "unique_id", n_windows = 5)
timegpt_cv_df <- timegpt_cv <- timegpt_cross_validation(df, h = 8, id_col = "unique_id", n_windows = 5)
timegpt_plot(df, timegpt_cv_df, id_col = "unique_id", max_insample_length = 96)
timegpt_plot(df, timegpt_cv_df, id_col = "unique_id", max_insample_length = 48)
24*4
24*3
timegpt_plot(df, timegpt_cv_df, id_col = "unique_id", max_insample_length = 100)
httptest2::start_capturing()
timegpt_cv_df <- timegpt_cv <- timegpt_cross_validation(df, h = 8, id_col = "unique_id", n_windows = 3)
httptest2::stop_capturing()
timegpt_plot(df, timegpt_cv_df, id_col = "unique_id", max_insample_length = 100)
timegpt_cv_df <- timegpt_cv <- timegpt_cross_validation(df, h = 8, id_col = "unique_id", n_windows = 5)
timegpt_plot(df, timegpt_cv_df, id_col = "unique_id", max_insample_length = 100)
httptest2::start_capturing()
timegpt_cv_df <- timegpt_cv <- timegpt_cross_validation(df, h = 8, id_col = "unique_id", n_windows = 5)
httptest2::stop_capturing()
timegpt_plot(df, timegpt_cv_df, id_col = "unique_id", max_insample_length = 100)
timegpt_cv_df <- timegpt_cv <- timegpt_cross_validation(df, h = 12, id_col = "unique_id", n_windows = 5)
timegpt_plot(df, timegpt_cv_df, id_col = "unique_id", max_insample_length = 100)
timegpt_cv_df <- timegpt_cross_validation(df, h = 8, id_col = "unique_id", n_windows = 5)
timegpt_plot(df, timegpt_cv_df, id_col = "unique_id", max_insample_length = 100)
View(timegpt_cv_df)
timegpt_cv_df <- timegpt_cv <- timegpt_cross_validation(df, h = 12, id_col = "unique_id", n_windows = 5, step_size = 24)
timegpt_cv_df <- timegpt_cross_validation(df, h = 12, id_col = "unique_id", n_windows = 5, step_size = 24)
timegpt_plot(df, timegpt_cv_df, id_col = "unique_id", max_insample_length = 100)
timegpt_plot(df, timegpt_cv_df, id_col = "unique_id", max_insample_length = 200)
View(timegpt_cv_df)
httptest2::start_capturing()
fcst <- timegpt_cross_validation(df, h = 8, id_col = "unique_id", n_windows = 5, step_size = 24)
httptest2::stop_capturing()
View(fcst)
httptest2::start_capturing()
fcst <- timegpt_cross_validation(df, h = 8, id_col = "unique_id", n_windows = 5, step_size = 24)
httptest2::stop_capturing()
timegpt_plot(df, fcst, id_col = "unique_id", max_insample_length = 200)
timegpt_plot(df, fcst, id_col = "unique_id", max_insample_length = 200)
fcst <- timegpt_cross_validation(df, h = 8, id_col = "unique_id", n_windows = 5)
timegpt_plot(df, fcst, id_col = "unique_id", max_insample_length = 200)
httptest2::start_capturing()
fcst <- timegpt_cross_validation(df, h = 8, id_col = "unique_id", n_windows = 5)
httptest2::stop_capturing()
load_all()
document()
check()
pkgdown::build_site()
check()
check()
check()
check()
check()
load_all()
check()
check()
load_all()
document()
check()
check()
load_all()
document()
check()
load_all()
document()
check()
check()
load_all()
document()
check()
httptest2::start_capturing()
fcst <- timegpt_historic(test_data, id_col="unique_id")
httptest2::stop_capturing()
load_all()
document()
check()
build_site()
pkgdown::build_site()
load_all()
document()
load_all()
document()
check()
check()
check()
library(devtools)
